services:
  api:
    build:
      context: .
      target: production
    container_name: modern-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    env_file: .env
    ports:
      - published: 3000
        target: 3000
    networks:
      - app-network
    volumes:
      - type: bind
        source: ./logs
        target: /app/logs
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s
    develop:
      watch:
        - path: ./src
          target: /app/src
          ignore:
            - node_modules/
        - path: package.json
          target: /app/package.json
    init: true

  postgres:
    image: postgres:16-alpine
    container_name: modern-api-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data
      - type: bind
        source: ./init-scripts
        target: /docker-entrypoint-initdb.d
    ports:
      - published: 5432
        target: 5432
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: modern-api-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - type: volume
        source: redis-data
        target: /data
    ports:
      - published: 6379
        target: 6379
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M

  prometheus:
    image: prom/prometheus:latest
    container_name: modern-api-prometheus
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./prometheus
        target: /etc/prometheus
      - type: volume
        source: prometheus-data
        target: /prometheus
    ports:
      - published: 9090
        target: 9090
    networks:
      - app-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: modern-api-grafana
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_DOMAIN: localhost
      GF_SMTP_ENABLED: "false"
    volumes:
      - type: volume
        source: grafana-data
        target: /var/lib/grafana
      - type: bind
        source: ./grafana/provisioning
        target: /etc/grafana/provisioning
      - type: bind
        source: ./grafana/dashboards
        target: /var/lib/grafana/dashboards
    ports:
      - published: 3001
        target: 3000
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M

networks:
  app-network:
    name: modern-api-network
    driver: bridge

volumes:
  postgres-data:
    name: modern-api-postgres-data
  redis-data:
    name: modern-api-redis-data
  prometheus-data:
    name: modern-api-prometheus-data
  grafana-data:
    name: modern-api-grafana-data